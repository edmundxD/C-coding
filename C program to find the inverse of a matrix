#include <stdio.h>
#define N 3

void getCofactor(int mat[N][N], int temp[N][N], int p, int q, int n) {
    int i = 0, j = 0;
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            if (row != p && col != q) {
                temp[i][j++] = mat[row][col];
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

int determinant(int mat[N][N], int n) {
    int D = 0;
    if (n == 1)
        return mat[0][0];
    int temp[N][N];
    int sign = 1;
    for (int f = 0; f < n; f++) {
        getCofactor(mat, temp, 0, f, n);
        D += sign * mat[0][f] * determinant(temp, n - 1);
        sign = -sign;
    }
    return D;
}

void adjoint(int mat[N][N], int adj[N][N]) {
    if (N == 1) {
        adj[0][0] = 1;
        return;
    }
    int sign = 1, temp[N][N];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            getCofactor(mat, temp, i, j, N);
            sign = ((i + j) % 2 == 0) ? 1 : -1;
            adj[j][i] = (sign) * (determinant(temp, N - 1));
        }
    }
}

int inverse(int mat[N][N], float inverse[N][N]) {
    int det = determinant(mat, N);
    if (det == 0) {
        printf("Singular matrix, can't find its inverse");
        return 0;
    }
    int adj[N][N];
    adjoint(mat, adj);
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            inverse[i][j] = adj[i][j] / (float)det;
    return 1;
}

void display(float mat[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%.2f ", mat[i][j]);
        printf("\n");
    }
}

int main() {
    int mat[N][N] = { {5, -2, 2},
                      {-1, 3, 1},
                      {2, 1, 4} };
    float inv[N][N];
    if (inverse(mat, inv))
        display(inv);
    return 0;
}
